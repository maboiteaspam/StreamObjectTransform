{"name":"StreamObjectTransform","tagline":"port of rvagg/through2 object stream to PHP.","body":"# StreamObjectTransform\r\nport of https://github.com/rvagg/through2 object stream to PHP.\r\n\r\nIt does not aim to be as powerful as the node stream interface, \r\nit s more about the programming pattern that i found really cool.\r\n\r\nSee yourself!\r\n\r\n\r\n### Usage\r\n\r\nrequire dependencies, then start\r\nto connect pipe to stream\r\nand transforms objects.\r\n\r\n\r\n```php\r\n<?php\r\nrequire 'vendor/autoload.php';\r\n\r\nuse \\C\\Stream\\StreamFlow;\r\nuse \\C\\Stream\\StreamObjectTransform;\r\n\r\n\r\n// create a stream\r\nStreamObjectTransform::through()\r\n\r\n    // pipe data and flow transformers\r\n    ->pipe(function($chunk){\r\n        var_dump(\"not duplexed $chunk\");\r\n        $stream->push($chunk); // push the chunk to the conneccted pipes.\r\n        // sometimes it is interesting to not push the chunk.\r\n    })\r\n\r\n    // write a data or an objeect to stream\r\n    ->write('some');\r\n\r\n```\r\n\r\n## Install\r\n\r\nUntil the module is published,\r\nadd this repository to the `composer` file\r\nthen run `composer update`.\r\n\r\nor run `c2-bin require-gh`\r\n\r\n```\r\nc2-bin require-gh -m=maboiteaspam/StreamObjectTransform\r\n```\r\n\r\nRead more about [c2-bin](https://github.com/maboiteaspam/c2-bin)\r\n\r\n\r\n### Example\r\n\r\nStream `some`,\r\n\r\nthen `demultiplex` it 2 times\r\n\r\n```php\r\n<?php\r\nrequire 'vendor/autoload.php';\r\n\r\nuse \\C\\Stream\\StreamFlow;\r\nuse \\C\\Stream\\StreamObjectTransform;\r\n\r\n// create a stream\r\nStreamObjectTransform::through()\r\n\r\n    // pipe it to a demultiplexer\r\n    ->pipe( StreamFlow::demultiplex(2)\r\n\r\n            // transform demultiplexed data\r\n            ->pipe(function($chunk){\r\n                var_dump(\"demultiplexed $chunk\");\r\n                $stream->push($chunk);\r\n            })\r\n    )\r\n    // transform data of the initial stream\r\n    ->pipe(function($chunk){\r\n        var_dump(\"not demultiplexed $chunk\");\r\n        $stream->push($chunk);\r\n    })\r\n    ->write('some');\r\n\r\n```\r\n\r\n\r\n### API\r\n\r\nClass __StreamObjectTransform__\r\n\r\nApply transform on streamed objects.\r\n\r\n__StreamObjectTransform:: pipe ($stream)__\r\n\r\n    /*\r\n     * pipe $stream\r\n     *      $stream can be one of\r\n     *      StreamObjectTransform or \\Callable\r\n     *\r\n     * if $stream is_callable, it is transformed\r\n     * into a new StreamObjectTransform($stream) instance.\r\n     *\r\n     * Returns $this pipe instance.\r\n     */\r\n\r\n\r\n__StreamObjectTransform:: write ($some)__\r\n\r\n    /**\r\n     * Write $some data on this $stream.\r\n     * It will call the transform,\r\n     * which can\r\n     * transform, multiply, pass or drop\r\n     * the stream chunk of data.\r\n     *\r\n     * to drop the chunk, do not call push.\r\n     *\r\n     * @param mixed $some\r\n     */\r\n\r\n\r\n__StreamObjectTransform:: push ($some)__\r\n\r\n    /**\r\n     * Write $some data to underlying $streams.\r\n     *\r\n     * please consider this :\r\n     * It should be __protected__, but for some reason,\r\n     * i had to make it public, and also, pass the $stream\r\n     * instance along the onData callback.\r\n     *\r\n     * I don t recommend to use it outside of the transform callbacks.\r\n     *\r\n     * @param mixed $some\r\n     */\r\n\r\n\r\nClass __StreamConcat__\r\n\r\nWatch for streamed objects and append them to array.\r\n\r\nClass __StreamDate__\r\n\r\nManipulate date of streamed objects.\r\n\r\nClass __StreamFlow__\r\n\r\nControl the flow of objects passed to the connected pipes.\r\n\r\nClass __StreamObject__\r\n\r\nManipulate streamed chunks as objects and modify them.\r\n\r\nClass __StreamText__\r\n\r\nGenerate text, words, sentences, enums and apply them to streamed chunks.\r\n\r\n\r\n\r\n### Read more\r\n\r\nRead more with this example, it s a bit simplified\r\n\r\nbut gathers multiple elements to provide a real example of use.\r\n\r\n##### Generator\r\n\r\nIf you define and use a class helper to generate entities such,\r\n\r\n__File:__ /C/Fixture/Generator.php\r\n\r\n```php\r\n<?php\r\nnamespace C\\Fixture;\r\n\r\nuse C\\Stream\\StreamConcat;\r\nuse C\\Stream\\StreamFlow;\r\n\r\nclass Generator{\r\n\r\n    /**\r\n     * push $len times\r\n     * a clone of $what\r\n     * modified with $transform\r\n     * returns the resulting array $results of data\r\n     *\r\n     * @param $what\r\n     * @param $transform\r\n     * @param int $len\r\n     * @return \\ArrayObject\r\n     */\r\n    public static function generate ($what, $transform, $len=10) {\r\n\r\n        $results = new \\ArrayObject();\r\n\r\n        $concat = new StreamConcat();\r\n\r\n        StreamFlow::demultiplex($len)\r\n            ->pipe($transform)\r\n            ->pipe($concat->appendTo($results))\r\n            ->write($what);\r\n\r\n        return $results;\r\n    }\r\n\r\n}\r\n```\r\n\r\nIt will demultiplex `$len` times the provided `$what` data.\r\n\r\nFor each chunk, it transforms it with `$transform`.\r\n\r\nIt then pipe each chunks to a resulting array `$results`.\r\n\r\n##### Fixture Generator\r\n\r\nWith this new helper on hand, a `fixtures` generator can look like this,\r\n\r\n```php\r\n<?php\r\n\r\nuse \\C\\Fixture\\Generator;\r\n\r\nuse \\C\\BlogData\\Entity\\Entry as EntryEntity;\r\nuse \\C\\BlogData\\Entity\\Comment as CommentEntity;\r\n\r\nuse \\C\\BlogData\\Modifier\\Entry as EntryModifier;\r\nuse \\C\\BlogData\\Modifier\\Comment as CommentModifier;\r\n\r\n$entry      = new EntryModifier();\r\n$comment    = new CommentModifier();\r\n\r\n/**\r\n * generate a hundred entries\r\n * each entry has 2 comments\r\n *\r\n * their status (VISIBLE, HIDDEN)\r\n * is random.\r\n *\r\n */\r\nreturn Generator::generate(\r\n    new EntryEntity(),      // the model object to demultiplex\r\n\r\n    $entry->transform()     // the stream transform to apply to each object\r\n        ->pipe( $object->modify('comments', function ($chunk) use($comment) { // update comments property\r\n                return Generator::generate(\r\n                    new CommentEntity(), // generate 2 comments\r\n                    $comment->transform($chunk->id), // forge them with this stream transform\r\n                    2 );\r\n        }))\r\n    , 100); // count of objects to create\r\n```\r\n\r\nIn this example a hundred `Entry` objects are created.\r\n\r\nEach object get its properties populated by\r\n`entry->transform()`.\r\n\r\nA pipe is then connected to generate and attach 2 `Comment`\r\nto the current `Entry` chunk.\r\n\r\nEach `Comment` is transformed by `comment->transform($chunk->id)`.\r\nThe entry id is used to distribute ids of the `Comment` objects.\r\n\r\nIt finally returns an array of forged `Entity` objects.\r\n\r\nReady to use.\r\n\r\n##### Fixture Modifier\r\n\r\n`EntryModifier` and `CommentModifier` are streams object,\r\n\r\nthey are qualified to receive respective kind of object,\r\n\r\nand forge their properties with help of stream transforms,\r\n\r\n```php\r\n<?php\r\nnamespace C\\BlogData\\Modifier;\r\n\r\nuse \\C\\Stream\\StreamImgUrl;\r\nuse \\C\\Stream\\StreamDate;\r\nuse \\C\\Stream\\StreamText;\r\nuse \\C\\Stream\\StreamObject;\r\nuse \\C\\Stream\\StreamObjectTransform;\r\n\r\n/**\r\n * Class Entry\r\n * provides stream to forge\r\n * Entry entities\r\n *\r\n * @package C\\BlogData\\Modifier\r\n */\r\nclass Entry{\r\n    /**\r\n     * return a stream object\r\n     * to transform any pushed $entry entity\r\n     *\r\n     * @param int $range_start\r\n     * @return mixed\r\n     */\r\n    public function transform ($range_start=0) {\r\n\r\n        $imgUrlGenerator = new StreamImgUrl();\r\n        $dateGenerator = new StreamDate();\r\n        $textGenerator = new StreamText();\r\n        $object = new StreamObject();\r\n\r\n        return StreamObjectTransform::through()\r\n            ->pipe($object->incProp('id', $range_start))\r\n            ->pipe($dateGenerator->generate('created_at'))\r\n            ->pipe($dateGenerator->modify('created_at', function ($chunk, $prop) use($dateGenerator){\r\n                return $dateGenerator->sub($prop, \"{$chunk->id} days + 1*{$chunk->id} hours\");\r\n            }))\r\n            ->pipe($dateGenerator->generate('updated_at'))\r\n            ->pipe($dateGenerator->modify('updated_at', function ($chunk, $prop) use($dateGenerator){\r\n                return $dateGenerator->sub($prop, \"{$chunk->id} days + 1*{$chunk->id} hours\");\r\n            }))\r\n            ->pipe($textGenerator->enum('author', $textGenerator->nicknames))\r\n            ->pipe($textGenerator->enum('status', ['VISIBLE', 'HIDDEN']))\r\n            ->pipe($textGenerator->words('title', rand(2, 5)))\r\n            ->pipe($textGenerator->sentences('content', rand(1, 3)))\r\n            ->pipe($imgUrlGenerator->imgUrl('img_alt', rand(1, 3)))\r\n            ;\r\n    }\r\n}\r\n```\r\n\r\n- https://github.com/maboiteaspam/BlogData/blob/master/src/C/Modifier/Entry.php\r\n- https://github.com/maboiteaspam/BlogData/blob/master/src/C/Modifier/Comment.php\r\n\r\n##### Object Modifiers\r\n\r\nObject modifiers such `StreamObject`, `StreamDate` are streams transforms\r\nto update streamed objects.\r\n\r\n```php\r\n<?php\r\nnamespace C\\Stream;\r\n\r\n/**\r\n * Class StreamDate\r\n * provides date property transform\r\n *\r\n * @package C\\BlogData\\Fixture\r\n */\r\nclass StreamDate{\r\n    /**\r\n     * update any written $chunk->$prop\r\n     * to set a date string\r\n     * formatted with $format\r\n     *\r\n     * @param $prop\r\n     * @param string $format\r\n     * @param null $date\r\n     * @return \\Closure\r\n     */\r\n    public function generate ($prop, $format='Y-m-d H:i', $date=null) {\r\n        $date = $date===null? new \\DateTime() :$date;\r\n        return function ($chunk, $stream) use($prop, $format, $date) {\r\n            $chunk->{$prop} = date_format($date, $format);\r\n            $stream->push($chunk);\r\n            return $chunk->{$prop};\r\n        };\r\n    }\r\n    //....\r\n}\r\n```\r\n\r\n- https://github.com/maboiteaspam/StreamObjectTransform/blob/master/src/C/Stream/StreamText.php\r\n- https://github.com/maboiteaspam/StreamObjectTransform/blob/master/src/C/Stream/StreamFlow.php\r\n\r\n##### Fixture Entity\r\n\r\n`EntryEntity` and `CommentEntity` are simple `PO` class.\r\n\r\n```php\r\n<?php\r\nnamespace C\\BlogData\\Entity;\r\n\r\nclass Entry{\r\n\r\n    public $id;\r\n    public $created_at;\r\n    public $updated_at;\r\n    public $title;\r\n    public $author;\r\n    public $img_alt;\r\n    public $content;\r\n    public $status;\r\n    /**\r\n     * @var array C\\BlogData\\Entity\\Comment\r\n     */\r\n    public $comments = [];\r\n}\r\n```\r\n\r\n- https://github.com/maboiteaspam/BlogData/blob/master/src/C/Entity/Entry.php\r\n- https://github.com/maboiteaspam/BlogData/blob/master/src/C/Entity/Comment.php\r\n\r\n##### Conclusion\r\n\r\nStream-Transforms are really cool : )\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}